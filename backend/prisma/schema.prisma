generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model User {
  id                String           @id @default(uuid())
  email             String           @unique
  password_hash     String?
  firstName         String
  lastName          String
  phone             String?
  role              String           @default("user")
  businessName      String?
  isActive          Boolean          @default(true)
  emailVerified     Boolean          @default(false)
  verificationToken String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  stripeCustomerId  String?          @unique
  venueId           String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  lastLoginAt       DateTime?
  activities        Activity[]
  activitiesCreated Activity[] @relation("ActivityCreator")
  auditLogs         AuditLog[]
  bookings          Booking[]
  broadcasts        Broadcast[]
  bulkOperations    BulkOperation[]
  children          Child[]
  courses           Course[]
  creditsCreated    Credit[]         @relation("CreditCreator")
  credits           Credit[]         @relation("CreditParent")
  discounts         Discount[]
  emailTemplates    EmailTemplate[]
  emails            Email[]
  notifications     Notification[]
  payments          Payment[]
  promoCodeUsages   PromoCodeUsage[]
  promoCodes        PromoCode[]
  refunds           Refund[]
  templates         Template[]
  transactions      Transaction[]
  venues            Venue[]
  walletCredits     WalletCredit[]
  widgetConfigs     WidgetConfig[]

  @@index([email])
  @@index([role])
  @@index([createdAt])
  @@map("users")
}

model Child {
  id          String            @id @default(uuid())
  firstName   String
  lastName    String
  dateOfBirth DateTime
  yearGroup   String?
  allergies   String?
  medicalInfo String?
  school      String
  class       String?
  parentId    String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  attendance  Attendance[]
  bookings    Booking[]
  permissions ChildPermission[]
  parent      User              @relation(fields: [parentId], references: [id])

  @@map("children")
}

model Venue {
  id                  String           @id @default(uuid())
  name                String
  address             String
  description         String?
  city                String?
  postcode            String?
  phone               String?
  email               String?
  capacity            Int?
  ownerId             String
  businessAccountId   String?
  stripeAccountId     String?
  inheritFranchiseFee Boolean          @default(true)
  franchiseFeeType    String?
  franchiseFeeValue   Decimal?         @db.Decimal(10, 2)
  // TFC Settings
  tfcEnabled          Boolean          @default(true)
  tfcHoldPeriod       Int              @default(5) // days
  tfcInstructions     String?          // Custom instruction text for parents
  tfcDefaultToCredit  Boolean          @default(true) // Default refunds to credit for TFC
  // Venue Setup Fields
  facilities          String[]         @default([]) // Array of facility names
  operatingHours      Json?            // Operating hours for each day of the week
  pricing             Json?            // Pricing settings (basePrice, currency, pricingType, discounts)
  bookingRules        Json?            // Booking rules (advanceBookingDays, cancellationHours, etc.)
  isActive            Boolean          @default(true)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  activities          Activity[]
  courses             Course[]
  payouts             Payout[]
  businessAccount     BusinessAccount? @relation(fields: [businessAccountId], references: [id])
  owner               User             @relation(fields: [ownerId], references: [id])

  @@map("venues")
}

model ActivityType {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  activities  Activity[]

  @@map("activity_types")
}

model Activity {
  id                String       @id @default(uuid())
  title             String
  type              String?
  activityTypeId    String?
  description       String?
  startDate         DateTime
  endDate           DateTime
  startTime         String
  endTime           String
  capacity          Int
  price             Decimal      @db.Decimal(10, 2)
  earlyDropoff      Boolean      @default(false)
  earlyDropoffPrice Decimal?     @db.Decimal(10, 2)
  latePickup        Boolean      @default(false)
  latePickupPrice   Decimal?     @db.Decimal(10, 2)
  status            String       @default("active")
  venueId           String
  ownerId           String
  createdBy         String
  whatToBring       String?
  isActive          Boolean      @default(true)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  owner             User         @relation(fields: [ownerId], references: [id])
  venue             Venue        @relation(fields: [venueId], references: [id])
  creator           User         @relation("ActivityCreator", fields: [createdBy], references: [id])
  activityType      ActivityType? @relation(fields: [activityTypeId], references: [id])
  bookings          Booking[]
  sessions          Session[]

  @@index([venueId])
  @@index([ownerId])
  @@index([createdBy])
  @@index([status])
  @@index([startDate])
  @@index([activityTypeId])
  @@map("activities")
}

model Booking {
  id               String              @id @default(uuid())
  activityId       String
  childId          String
  parentId         String
  status           String              @default("pending")
  paymentStatus    String              @default("pending")
  paymentMethod    String              @default("card")
  amount           Decimal             @db.Decimal(10, 2)
  totalAmount      Decimal?            @db.Decimal(10, 2)
  currency         String              @default("GBP")
  paymentIntentId  String?             @unique
  tfcReference     String?             @unique
  tfcDeadline      DateTime?
  tfcInstructions  String?
  holdPeriod       Int?                @default(5)
  bookingDate      DateTime
  activityDate     DateTime
  activityTime     String
  notes            String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  attendance       Attendance[]
  activity         Activity            @relation(fields: [activityId], references: [id])
  child            Child               @relation(fields: [childId], references: [id])
  parent           User                @relation(fields: [parentId], references: [id])
  bankFeedTransactions BankFeedTransaction[]
  chargebacks      Chargeback[]
  credits_new      Credit[]
  emails           Email[]
  paymentSuccesses PaymentSuccess[]
  payments         Payment[]
  promoCodeUsages  PromoCodeUsage[]
  refunds          RefundTransaction[]
  refunds_new      Refund[]
  transactions     Transaction[]
  credits          WalletCredit[]

  @@index([parentId])
  @@index([parentId, status])
  @@index([createdAt])
  @@index([parentId, createdAt])
  @@index([status, createdAt])
  @@index([activityId])
  @@map("bookings")
}

model Notification {
  id        String    @id @default(uuid())
  userId    String
  venueId   String?
  type      String
  title     String
  message   String
  data      Json?
  priority  String    @default("medium")
  channels  Json      @default("[\"in_app\"]")
  status    String    @default("pending")
  read      Boolean   @default(false)
  sentAt    DateTime?
  readAt    DateTime?
  error     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model WebhookEvent {
  id          String    @id @default(uuid())
  eventType   String
  source      String
  data        Json?
  processed   Boolean   @default(false)
  processedAt DateTime?
  retryCount  Int       @default(0)
  error       String?
  externalId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("webhook_events")
}

model WebhookConfig {
  id              String    @id @default(uuid())
  name            String
  url             String
  events          Json
  secret          String
  active          Boolean   @default(true)
  retryCount      Int       @default(3)
  timeoutMs       Int       @default(30000)
  headers         Json?
  description     String?
  lastTriggeredAt DateTime?
  successCount    Int       @default(0)
  failureCount    Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("webhook_configs")
}

model WidgetConfig {
  id           String    @id @default(uuid())
  name         String
  theme        String    @default("light")
  primaryColor String    @default("#00806a")
  position     String    @default("bottom-right")
  showLogo     Boolean   @default(true)
  customCSS    String?
  isActive     Boolean   @default(true)
  createdBy    String?
  updatedBy    String?
  deletedBy    String?
  deletedAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  creator      User?     @relation(fields: [createdBy], references: [id])

  @@map("widget_configs")
}

model WidgetAnalytics {
  id         String   @id @default(uuid())
  eventType  String
  widgetId   String
  venueId    String?
  activityId String?
  timestamp  DateTime @default(now())
  eventData  Json?
  userAgent  String?
  ipAddress  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("widget_analytics")
}

model WalletCredit {
  id            String    @id @default(uuid())
  parentId      String
  providerId    String?
  bookingId     String?
  amount        Decimal   @db.Decimal(10, 2)
  usedAmount    Decimal   @default(0) @db.Decimal(10, 2)
  expiryDate    DateTime
  source        String
  status        String    @default("active")
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  usedAt        DateTime?
  transactionId String?
  booking       Booking?  @relation(fields: [bookingId], references: [id])
  parent        User      @relation(fields: [parentId], references: [id], onDelete: Cascade)

  @@map("wallet_credits")
}

model RefundTransaction {
  id             String    @id @default(uuid())
  paymentId      String
  bookingId      String
  amount         Decimal   @db.Decimal(10, 2)
  method         String
  fee            Decimal   @default(0) @db.Decimal(10, 2)
  reason         String
  status         String    @default("pending")
  processedAt    DateTime?
  adminId        String?
  auditTrail     Json?
  stripeRefundId String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  booking        Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  payment        Payment   @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@map("refund_transactions")
}

model Payment {
  id                    String              @id @default(uuid())
  bookingId             String
  userId                String
  stripePaymentIntentId String?             @unique
  amount                Decimal             @db.Decimal(10, 2)
  currency              String              @default("GBP")
  status                String              @default("pending")
  paymentMethod         String              @default("stripe")
  stripeAccountId       String?
  refundedAmount        Decimal?            @default(0) @db.Decimal(10, 2)
  refundedAt            DateTime?
  completedAt           DateTime?
  failedAt              DateTime?
  failureReason         String?
  metadata              Json?
  isActive              Boolean             @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  booking               Booking             @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  user                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  refunds               RefundTransaction[]

  @@map("payments")
}

model ProviderSettings {
  id                  String   @id @default(uuid())
  providerId          String   @unique
  tfcEnabled          Boolean  @default(false)
  tfcHoldPeriod       Int      @default(5)
  tfcInstructions     String?
  tfcPayeeName        String?
  tfcPayeeReference   String?
  tfcSortCode         String?
  tfcAccountNumber    String?
  defaultRefundMethod String   @default("credit")
  adminFeeAmount      Decimal  @default(2.00) @db.Decimal(10, 2)
  creditExpiryMonths  Int      @default(12)
  cancellationPolicy  Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("provider_settings")
}

model Chargeback {
  id              String    @id @default(uuid())
  bookingId       String
  chargebackId    String    @unique
  amount          Decimal   @db.Decimal(10, 2)
  reason          String
  status          String    @default("pending")
  receivedAt      DateTime
  evidenceDueDate DateTime?
  resolvedAt      DateTime?
  resolvedBy      String?
  resolutionNotes String?
  adminId         String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  booking         Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("chargebacks")
}

model AuditLog {
  id         String   @id @default(uuid())
  entityType String
  entityId   String
  action     String
  userId     String
  userRole   String
  changes    Json?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model Payout {
  id             String    @id @default(uuid())
  venueId        String
  amount         Decimal   @db.Decimal(10, 2)
  currency       String    @default("GBP")
  status         String    @default("pending")
  stripePayoutId String?
  scheduledDate  DateTime?
  completedDate  DateTime?
  failureReason  String?
  metadata       Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  venue          Venue     @relation(fields: [venueId], references: [id])

  @@map("payouts")
}

model Register {
  id         String       @id @default(uuid())
  sessionId  String
  date       DateTime
  status     String       @default("active")
  notes      String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  attendance Attendance[]
  session    Session      @relation(fields: [sessionId], references: [id])

  @@map("registers")
}

model Attendance {
  id           String    @id @default(uuid())
  registerId   String
  childId      String
  bookingId    String
  present      Boolean   @default(false)
  checkInTime  DateTime?
  checkOutTime DateTime?
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  booking      Booking   @relation(fields: [bookingId], references: [id])
  child        Child     @relation(fields: [childId], references: [id])
  register     Register  @relation(fields: [registerId], references: [id], onDelete: Cascade)

  @@map("attendance")
}

model Template {
  id              String   @id @default(uuid())
  name            String
  type            String
  years           String
  description     String?
  whatToBring     String?
  defaultPrice    Decimal? @db.Decimal(10, 2)
  defaultCapacity Int?
  flags           Json
  tags            String[]
  imageUrl        String?
  status          String   @default("active")
  createdBy       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  courses         Course[]
  creator         User     @relation(fields: [createdBy], references: [id])

  @@map("templates")
}

model BusinessAccount {
  id                String   @id @default(uuid())
  name              String
  stripeAccountId   String   @unique
  stripeAccountType String
  status            String
  franchiseFeeType  String   @default("percent")
  franchiseFeeValue Decimal  @db.Decimal(10, 2)
  vatMode           String   @default("inclusive")
  adminFeeAmount    Decimal? @db.Decimal(10, 2)
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  venues            Venue[]

  @@map("business_accounts")
}

model Course {
  id         String    @id @default(uuid())
  templateId String?
  venueId    String
  name       String
  type       String
  years      String
  price      Decimal   @db.Decimal(10, 2)
  capacity   Int
  startDate  DateTime
  endDate    DateTime
  weekday    String?
  time       String?
  extras     Json?
  status     String    @default("draft")
  createdBy  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  creator    User      @relation(fields: [createdBy], references: [id])
  template   Template? @relation(fields: [templateId], references: [id])
  venue      Venue     @relation(fields: [venueId], references: [id])

  @@map("courses")
}

model Session {
  id            String     @id @default(uuid())
  activityId    String
  date          DateTime
  startTime     String
  endTime       String
  status        String     @default("scheduled")
  capacity      Int        @default(0)
  bookingsCount Int        @default(0)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  registers     Register[]
  activity      Activity   @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model EmailTemplate {
  id               String   @id @default(uuid())
  name             String
  trigger          String
  subjectTemplate  String
  bodyHtmlTemplate String
  bodyTextTemplate String?
  active           Boolean  @default(true)
  brandOverrides   Json?
  placeholders     String[]
  createdBy        String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  creator          User     @relation(fields: [createdBy], references: [id])
  emails           Email[]

  @@map("email_templates")
}

model Broadcast {
  id            String    @id @default(uuid())
  title         String
  subject       String
  bodyHtml      String
  bodyText      String?
  audienceQuery Json
  channels      String[]
  scheduledFor  DateTime?
  sentAt        DateTime?
  status        String    @default("draft")
  createdBy     String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  creator       User      @relation(fields: [createdBy], references: [id])
  emails        Email[]

  @@map("broadcasts")
}

model Email {
  id                String         @id @default(uuid())
  broadcastId       String?
  templateId        String?
  parentId          String
  bookingId         String?
  toEmail           String
  toName            String
  messageType       String
  subject           String
  channel           String         @default("email")
  providerMessageId String?
  sentAt            DateTime?
  lastStatus        String         @default("pending")
  lastStatusAt      DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  events            EmailEvent[]
  booking           Booking?       @relation(fields: [bookingId], references: [id])
  broadcast         Broadcast?     @relation(fields: [broadcastId], references: [id])
  parent            User           @relation(fields: [parentId], references: [id])
  template          EmailTemplate? @relation(fields: [templateId], references: [id])

  @@map("emails")
}

model EmailEvent {
  id              String   @id @default(uuid())
  emailId         String
  eventType       String
  providerEventId String?
  meta            Json?
  occurredAt      DateTime
  createdAt       DateTime @default(now())
  email           Email    @relation(fields: [emailId], references: [id], onDelete: Cascade)

  @@map("email_events")
}

model Transaction {
  id              String    @id @default(uuid())
  parentId        String
  bookingId       String?
  amount          Decimal   @db.Decimal(10, 2)
  currency        String    @default("GBP")
  paymentMethod   String
  status          String    @default("pending")
  stripePaymentId String?
  tfcReference    String?
  description     String?
  metadata        Json?
  processedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  refunds         Refund[]
  booking         Booking?  @relation(fields: [bookingId], references: [id])
  parent          User      @relation(fields: [parentId], references: [id])

  @@map("transactions")
}

model BankFeedTransaction {
  id                String   @id @default(uuid())
  bankReference     String   @unique // Bank's transaction reference
  amount            Decimal  @db.Decimal(10, 2)
  currency          String   @default("GBP")
  paymentReference  String?  // TFC payment reference from booking
  description       String?  // Bank transaction description
  transactionDate   DateTime
  bankAccount       String?  // Bank account identifier
  status            String   @default("pending") // pending, matched, unmatched, processed
  matchedBookingId  String?  // If matched to a booking
  matchedAt         DateTime?
  processedAt       DateTime?
  metadata          Json?    // Additional bank data
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  matchedBooking    Booking? @relation(fields: [matchedBookingId], references: [id])

  @@index([paymentReference])
  @@index([status])
  @@index([transactionDate])
  @@map("bank_feed_transactions")
}

model Discount {
  id           String    @id @default(uuid())
  name         String
  code         String    @unique
  type         String
  value        Decimal   @db.Decimal(10, 2)
  minAmount    Decimal?  @db.Decimal(10, 2)
  maxUses      Int?
  usedCount    Int       @default(0)
  validFrom    DateTime
  validUntil   DateTime?
  applicableTo String[]
  venueIds     String[]
  activityIds  String[]
  active       Boolean   @default(true)
  createdBy    String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  creator      User      @relation(fields: [createdBy], references: [id])

  @@map("discounts")
}

model Credit {
  id          String    @id @default(uuid())
  parentId    String
  amount      Decimal   @db.Decimal(10, 2)
  usedAmount  Decimal   @default(0) @db.Decimal(10, 2)
  source      String
  description String?
  expiresAt   DateTime?
  status      String    @default("active")
  bookingId   String?
  createdBy   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  usedAt      DateTime?
  booking     Booking?  @relation(fields: [bookingId], references: [id])
  creator     User?     @relation("CreditCreator", fields: [createdBy], references: [id])
  parent      User      @relation("CreditParent", fields: [parentId], references: [id])

  @@map("credits")
}

model Refund {
  id             String      @id @default(uuid())
  transactionId  String
  parentId       String
  bookingId      String?
  amount         Decimal     @db.Decimal(10, 2)
  method         String
  reason         String
  status         String      @default("processing")
  stripeRefundId String?
  processedAt    DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  booking        Booking?    @relation(fields: [bookingId], references: [id])
  parent         User        @relation(fields: [parentId], references: [id])
  transaction    Transaction @relation(fields: [transactionId], references: [id])

  @@map("refunds")
}

model BulkOperation {
  id             String    @id @default(uuid())
  type           String
  status         String    @default("pending")
  totalItems     Int       @default(0)
  processedItems Int       @default(0)
  failedItems    Int       @default(0)
  userId         String
  parameters     Json?
  errorMessage   String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  completedAt    DateTime?
  user           User      @relation(fields: [userId], references: [id])

  @@map("bulk_operations")
}

model ChildPermission {
  id                        String   @id @default(uuid())
  childId                   String
  consentToWalkHome         Boolean  @default(false)
  consentToPhotography      Boolean  @default(false)
  consentToFirstAid         Boolean  @default(false)
  consentToEmergencyContact Boolean  @default(false)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  child                     Child    @relation(fields: [childId], references: [id], onDelete: Cascade)

  @@map("child_permissions")
}

model PromoCode {
  id           String           @id @default(uuid())
  code         String           @unique
  name         String
  description  String?
  type         String
  value        Decimal          @db.Decimal(10, 2)
  minAmount    Decimal?         @db.Decimal(10, 2)
  maxUses      Int?
  usedCount    Int              @default(0)
  validFrom    DateTime
  validUntil   DateTime?
  applicableTo String[]
  venueIds     String[]
  activityIds  String[]
  active       Boolean          @default(true)
  createdBy    String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  usages       PromoCodeUsage[]
  creator      User             @relation(fields: [createdBy], references: [id])

  @@map("promo_codes")
}

model PromoCodeUsage {
  id             String    @id @default(uuid())
  promoCodeId    String
  bookingId      String
  userId         String
  discountAmount Decimal   @db.Decimal(10, 2)
  createdAt      DateTime  @default(now())
  booking        Booking   @relation(fields: [bookingId], references: [id])
  promoCode      PromoCode @relation(fields: [promoCodeId], references: [id])
  user           User      @relation(fields: [userId], references: [id])

  @@map("promo_code_usages")
}

model PaymentSuccess {
  id              String   @id @default(uuid())
  bookingId       String
  paymentIntentId String   @unique
  amount          Decimal  @db.Decimal(10, 2)
  currency        String   @default("GBP")
  paymentMethod   String
  receiptSent     Boolean  @default(false)
  calendarAdded   Boolean  @default(false)
  createdAt       DateTime @default(now())
  booking         Booking  @relation(fields: [bookingId], references: [id])

  @@map("payment_successes")
}
